<!-- cspell:ignore lowp mediump -->
<shaders>
  <!--
    Empty shader; only used as a workaround for rendering sprites on top of the HUD.

    Even though the shader does nothing, all of the code is mandatory, because the vertex shader has
    to return the correct position and the fragment shader has to return the correct color.

    This is originally taken from StageAPI.
  -->
  <shader name="IsaacScript-RenderAboveHUD">
    <parameters />
    <vertex><![CDATA[
            attribute vec3 Position;
            attribute vec4 Color;
            attribute vec2 TexCoord;
            attribute vec4 RenderData;
            attribute float Scale;

            varying lowp vec4 Color0;
            varying mediump vec2 TexCoord0;
            varying lowp vec4 RenderDataOut;
            varying lowp float ScaleOut;
            uniform sampler2D Texture0;

            uniform mat4 Transform;
            void main(void)
            {
                RenderDataOut = RenderData;
                ScaleOut = Scale;
                Color0 = Color;
                TexCoord0 = TexCoord;
                gl_Position = Transform * vec4(Position.xyz, 1.0);
            }
        ]]></vertex>
    <fragment><![CDATA[
            varying lowp vec4 Color0;
            varying mediump vec2 TexCoord0;
            varying lowp vec4 RenderDataOut;
            varying lowp float ScaleOut;
            uniform sampler2D Texture0;
            void main(void)
            {
                vec4 Color = Color0 * texture2D(Texture0, TexCoord0);
                gl_FragColor = Color;
            }
        ]]></fragment>
  </shader>
  <shader name="Purgatory-Grayscale">
		<parameters>
			<param name="Enabled" type="float"/>
		</parameters>
    <vertex><![CDATA[
            attribute vec3 Position;
            attribute vec4 Color;
            attribute vec2 TexCoord;
            attribute vec4 RenderData;
            attribute float Scale;
            attribute float Enabled;
            varying vec4 Color0;
            varying vec2 TexCoord0;
            varying vec4 RenderDataOut;
            varying float ScaleOut;
			      varying float EnabledOut;
            uniform mat4 Transform;
            void main(void)
            {
                RenderDataOut = RenderData;
                ScaleOut = Scale;			// Passing data to fragment shader
                EnabledOut = Enabled;
                Color0 = Color;
                TexCoord0 = TexCoord;
                gl_Position = Transform * vec4(Position.xyz, 1.0);
            }
        ]]></vertex>
		<fragment><![CDATA[
              varying lowp vec4 Color0;
              varying mediump vec2 TexCoord0;
              varying lowp vec4 RenderDataOut;
              varying lowp float ScaleOut;
              varying lowp float EnabledOut;
              uniform sampler2D Texture0;
              void main(void)
              {
                  vec4 Color = Color0 * texture2D(Texture0, TexCoord0);
                  if (EnabledOut == 1)
                  {
                      float grayColor = (Color.r + Color.g + Color.b)/3;
                      Color.r = grayColor + Color.r * 0.2;
                      Color.g = grayColor + Color.g * 0.2;
                      Color.b = grayColor + Color.b * 0.2;
                  }
                  gl_FragColor = Color;
              }
        ]]></fragment>
  </shader>
</shaders>
